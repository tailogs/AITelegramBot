import asyncio
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from openai import OpenAI
import httpx
from collections import defaultdict, deque
from db import init_db, log_request, log_writer, load_recent_messages, NAME_DB
import re
import sqlite3

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞: user_id -> –æ—á–µ—Ä–µ–¥—å –∏–∑ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
dialogues = defaultdict(lambda: deque(maxlen = 10))

load_dotenv() # –ó–∞–≥—Ä—É–∂–∞–µ–º .env

TOKEN = getenv("BOT_TOKEN")
OPENROUTER_KEY = getenv("CHATBOT_KEY")
NEWS_API_KEY = getenv("NEWS_API_KEY")

user_roles = defaultdict(lambda: "standard") # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äì —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º

client = OpenAI(
    base_url = "https://openrouter.ai/api/v1",
    api_key = OPENROUTER_KEY,
    http_client = httpx.Client(timeout = httpx.Timeout(20.0))
)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text = "ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò", callback_data = "ask_ai")],
    [InlineKeyboardButton(text = "üì∞ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏", callback_data = "news")],
    [InlineKeyboardButton(text = "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", callback_data = "fact")],
    [InlineKeyboardButton(text = "üé≠ –í—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å", callback_data = "role")],
    [InlineKeyboardButton(text = "‚ùì –ü–æ–º–æ—â—å", callback_data = "help")],
    [InlineKeyboardButton(text = "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", callback_data = "clear_memory")]
])

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π
role_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π", callback_data = "role_standard")],
    [InlineKeyboardButton(text = "–§–∏–ª–æ—Å–æ—Ñ", callback_data = "role_philosopher")],
    [InlineKeyboardButton(text = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", callback_data = "role_programmer")],
    [InlineKeyboardButton(text = "–ö–æ–º–∏–∫", callback_data = "role_comedian")],
    [InlineKeyboardButton(text = "üîô –ù–∞–∑–∞–¥", callback_data = "back_to_menu")],
])

role_prompts = {
    "standard": "–¢—ã ‚Äì –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.",
    "philosopher": "–¢—ã ‚Äì –º—É–¥—Ä—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ, –¥–∞—é—â–∏–π –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.",
    "programmer": "–¢—ã ‚Äì –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –æ–±—ä—è—Å–Ω—è—é—â–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç–æ.",
    "comedian": "–¢—ã ‚Äì –∫–æ–º–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —Å —é–º–æ—Ä–æ–º –∏ —à—É—Ç–∫–∞–º–∏.",
}

async def show_role_menu(msg):
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ò–ò: ", reply_markup = role_keyboard)

def strip_html_links(text):
    return re.sub(r'<a href="([^"]+)">([^<]+)</a>', r'\2 ‚Äî \1', text)

def restore_all_dialogues():
    conn = sqlite3.connect(NAME_DB)
    c = conn.cursor()
    c.execute("""
        SELECT DISTINCT user_id FROM logs
        WHERE event_type IN ('message', 'response')
    """)
    user_ids = [row[0] for row in c.fetchall()]
    conn.close()

    for user_id in user_ids:
        messages = load_recent_messages(user_id)
        dq = deque(messages[-10:], maxlen = 10) # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        dialogues[user_id] = dq    

async def send_news_and_remember(user_id: int, msg_func, raw_source: str = "news"):
    news = await get_top_news()
    log_request(user_id, "response", raw_source, news)
    # –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ø–∞–º—è—Ç—å (–±–µ–∑ HTML —Ç–µ–≥–æ–≤)
    plain_news = strip_html_links(news)
    dialogues[user_id].append({
        "role": "user",
        "content": "–ü–æ–∫–∞–∂–∏ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
    })
    dialogues[user_id].append({
        "role": "assistant",
        "content": plain_news
    })
    await msg_func(f"üì∞ –¢–æ–ø-–Ω–æ–≤–æ—Å—Ç–∏:\n\n{news}", parse_mode = "HTML", disable_web_page_preview=True)

# Command handler
@dp.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    user_id = message.from_user.id
    log_request(user_id, "command", "/start", "showed menu")
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup = menu_keyboard)

@dp.message(Command("help"))
async def help_command(message: Message):
    help_text = (
        "üìò *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @Tailogs –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö, –ø–µ—Ä–µ–≤–æ–¥–∞—Ö, "
        "–ø–æ–∏—Å–∫–µ —Ñ–∞–∫—Ç–æ–≤, –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–æ–ª–µ–π (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, —Ñ–∏–ª–æ—Å–æ—Ñ –∏ –¥—Ä).\n\n"
        "üí° *–ë–æ—Ç —É–º–µ–µ—Ç:*\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤—è–∑–Ω—ã–π –¥–∏–∞–ª–æ–≥\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏\n"
        "‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç—ã\n"
        "‚Ä¢ –í—ã–¥–∞–≤–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö —Ä–æ–ª–µ–π\n\n"
        "üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "`/translate <—è–∑—ã–∫> <—Ç–µ–∫—Å—Ç>` ‚Äî –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç\n"
        "`/clear` ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞\n"
        "`/menu` ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
        "`/fact` ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n"
        "`/role` ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–æ–ª—å –¥–ª—è –ò–ò\n"
        "`/help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await message.answer(help_text, parse_mode="Markdown")

@dp.message(Command("menu"))
async def menu_command(message: Message):
    await message.answer("üìã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

@dp.message(Command("clear"))
async def clear_command(message: Message):
    user_id = message.from_user.id
    dialogues[user_id].clear()
    await message.answer("üß† –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")

@dp.message(Command("fact"))
async def random_fact_command(message: Message):
    await handle_request(message, "–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç")

@dp.message(Command("news"))
async def news_command(message: Message):
    await send_news_and_remember(message.from_user.id, message.answer, "/news")

@dp.message(Command("role"))
async def role_command(message: Message):
    user_id = message.from_user.id 
    try:
        await message.delete()
    except Exception as e:
        error_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}"
        print(error_text)
        log_request(user_id, "error", "delete_message", error_text)
    await show_role_menu(message)

async def send_long_message(message: Message, text: str):
    # –î–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤ (Telegram –ª–∏–º–∏—Ç)
    for i in range(0, len(text), 4096):
        chunk = text[i : i + 4096]
        await message.answer(chunk)

async def safe_chat_completion(messages: list, model: str = "deepseek/deepseek-r1-0528-qwen3-8b:free"):
    loop = asyncio.get_running_loop()
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        response = await loop.run_in_executor(None, lambda: client.chat.completions.create(
            model = model,
            messages = messages,
        ))
        return response
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")

async def get_top_news():
    url = (
        "https://newsapi.org/v2/everything?"
        "q=–Ω–æ–≤–æ—Å—Ç–∏&language=ru&pageSize=10&sortBy=publishedAt"
    )
    headers = {"Authorization": NEWS_API_KEY}

    try:
        async with httpx.AsyncClient(timeout = 10) as client:
            response = await client.get(url, headers = headers)
            response.raise_for_status() # –ï—Å–ª–∏ 403/500 –∏ —Ç.–ø.
            data = response.json()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}"

    articles = data.get("articles", [])
    if not articles:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏."

    news_items = []
    for article in articles:
        title = article.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        url = article.get("url", "#")
        news_items.append(f"‚Ä¢ <a href=\"{url}\">{title}</a>")

    return "\n\n".join(news_items)

@dp.message()
async def ai_reply(message: Message) -> None:
    user_id = message.from_user.id
    user_text = message.text or ""

    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫—Ä–æ–º–µ /translate
    if user_text.startswith("/") and not user_text.startswith("/translate"):
        return # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    
    log_request(user_id, "message", user_text, "") # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π –≤–≤–æ–¥

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–æ–º–∞–Ω–¥–∞ –ª–∏ —ç—Ç–æ /translate
    if user_text.startswith("/translate"):
        parts = user_text.split(maxsplit = 2) # ['/translate', 'en', '—Ç–µ–∫—Å—Ç']
        if len(parts) < 3:
            log_request(user_id, "translate", user_text, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /translate <–∫–æ–¥ —è–∑—ã–∫–∞, en –∏ —Ç.–¥.> <—Ç–µ–∫—Å—Ç>")
            return

        target_lang = parts[1]
        text_to_translate = parts[2]

        # –§–æ—Ä–º–æ—Ç–∏—Ä—É–µ–º prompt –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        prompt = (
            f"Translate the following text to {target_lang}. "
            "Only return the translation, without explanations. "
            "If there are multiple possible translations, list them each on a new line, "
            "each starting with a bullet point like this: ‚Ä¢ Translation.\n\n"
            f"{text_to_translate}"
        )

        try:
            completion = await safe_chat_completion(
                messages = [{"role": "user", "content": prompt}]
            )
            translation = completion.choices[0].message.content
            log_request(user_id, "translate", text_to_translate, translation)
            await send_long_message(message, translation)
        except Exception as e:
            error_text = str(e)
            log_request(user_id, "error", "translate", error_text)
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {error_text}")
        return # –ß—Ç–æ–±—ã –Ω–µ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ –≤ –æ–±—â–∏–π AI –æ—Ç–≤–µ—Ç

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = user_roles[user_id]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ä–æ–ª–∏ –≤ –Ω–∞—á–∞–ª–µ
    system_message = {"role": "system", "content": role_prompts.get(role, role_prompts["standard"])}
    user_msgs = list(dialogues[user_id])
    messages = [system_message] + user_msgs + [{"role": "user", "content": user_text}]

    # –î–æ–±–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç—å
    dialogues[user_id].append({"role": "user", "content": user_text})

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        completion = await safe_chat_completion(messages)
        reply = completion.choices[0].message.content
        log_request(user_id, "response", user_text, reply)    
        # –î–æ–±–∞–≤–∏–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –ø–∞–º—è—Ç—å
        dialogues[user_id].append({"role": "assistant", "content": reply})

        await send_long_message(message, reply)

    except Exception as e:
        error_text = str(e)
        log_request(user_id, "error", user_text, error_text)
        await message.answer(f"–û—à–∏–±–∫–∞: {error_text}")

@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data
    log_request(user_id, "callback", data, "")

    if data == "role":
        # –£–¥–∞–ª–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            await callback.message.delete()
        except Exception as e:
            log_request(user_id, "error", "delete_message", str(e))
        await show_role_menu(callback.message)

    if data == "role":
        await show_role_menu(callback.message)
    elif data.startswith("role_"):
        role = data[len("role_"):] # –ù–∞–ø—Ä–∏–º–µ—Ä, "philosopher"
        user_roles[user_id] = role
        await callback.message.answer(f"–†–µ–∂–∏–º –ò–ò –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {role}")
        await callback.answer()
        return
    elif data == "ask_ai":
        await callback.message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò.")
    elif data == "news":
        await send_news_and_remember(user_id, callback.message.answer, "news_request")
    elif data == "fact":
        try:
            prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç."

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            dialogues[user_id].append({"role": "user", "content": prompt})

            completion = await safe_chat_completion(list(dialogues[user_id]))
            fact = completion.choices[0].message.content
            log_request(user_id, "response", prompt, fact)
            dialogues[user_id].append({"role": "assistant", "content": fact})

            await callback.message.answer(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:\n\n{fact}")
        except Exception as e:
            error_text = str(e)
            log_request(user_id, "error", "fact callback", error_text)
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞: {error_text}")
    elif data == "help":
        await help_command(callback.message)
    elif data == "clear_memory":
        dialogues[user_id].clear()
        role = user_roles[user_id]
        system_msg = {"role": "system", "content": role_prompts.get(role, role_prompts["standard"])}
        dialogues[user_id].append(system_msg)
        await callback.message.answer("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞.")
    elif data == "back_to_menu":
        await callback.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ", reply_markup = menu_keyboard)

    await callback.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª "–∑–∞–≥—Ä—É–∑–∫–∞"

# Run the bot
async def main() -> None:
    init_db()
    restore_all_dialogues()
    shutdown_event = asyncio.Event()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–µ—Ä –≤ —Ñ–æ–Ω–µ
    task = asyncio.create_task(log_writer(shutdown_event))
    try:
        await dp.start_polling(bot)
    finally:
        shutdown_event.set()
        await task

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"FATAL ERROR: {e}")